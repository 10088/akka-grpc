@*
 * Copyright (C) 2018 Lightbend Inc. <https://www.lightbend.com>
 *@

@(service: akka.grpc.gen.scaladsl.Service)

package @service.packageName

import akka.NotUsed
import akka.grpc.internal.{ Marshaller, NettyClientUtils, RequestBuilderImpl  }
import akka.grpc.{ GrpcClientSettings, RequestBuilder }
import akka.stream.{ Materializer, OverflowStrategy }
import akka.stream.scaladsl.{ Flow, Sink, Source }
import akka.stream.Materializer
import scala.concurrent.{ ExecutionContext, Future }

import io.grpc._
import io.grpc.stub.{ ClientCalls, StreamObserver }
import @{service.name}Client._

final class @{service.name}Client(settings: GrpcClientSettings)(implicit mat: Materializer, ex: ExecutionContext) extends @{service.name} {
  import @{service.name}Client._

  private val channel = NettyClientUtils.createChannel(settings)
  private val options = settings.options.getOrElse(CallOptions.DEFAULT)

  @for(method <- service.methods) {
    private val @{method.name}RequestBuilder = {
      @if(method.methodType == akka.grpc.gen.Unary) {
        RequestBuilderImpl.unary(@{method.name}Descriptor, channel, options)
      } else {
        val fqName = "@{service.grpcName}.@{method.grpcName}"
        @if(method.methodType == akka.grpc.gen.ServerStreaming) {
          RequestBuilderImpl.serverStreaming(@{method.name}Descriptor, fqName, channel, options)
        } else if(method.methodType == akka.grpc.gen.ClientStreaming) {
          RequestBuilderImpl.clientStreaming(@{method.name}Descriptor, fqName, channel, options)
        } else if (method.methodType == akka.grpc.gen.BidiStreaming) {
          RequestBuilderImpl.bidirectional(@{method.name}Descriptor, fqName, channel, options)
        }
      }
    }
  }

  @for(method <- service.methods) {
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer @{method.name}(@method.parameterType) if possible.
     */
    def @{method.name}(): RequestBuilder[@method.parameterType, @method.returnType] =
      @{method.name}RequestBuilder

    /**
     * For access to method metadata use the parameterless version of @{method.name}
     */
    def @{method.name}(in: @method.parameterType): @method.returnType =
      @{method.name}().invoke(in)
  }

  // TODO perhaps return Future[Done]?
  def close(): Unit = channel.shutdown()

}

@mapMethodType(methodType: akka.grpc.gen.MethodType) = {
  @if(methodType == akka.grpc.gen.Unary) { MethodDescriptor.MethodType.UNARY }
  @if(methodType == akka.grpc.gen.ClientStreaming) {MethodDescriptor.MethodType.CLIENT_STREAMING }
  @if(methodType == akka.grpc.gen.ServerStreaming) { MethodDescriptor.MethodType.SERVER_STREAMING }
  @if(methodType == akka.grpc.gen.BidiStreaming) {MethodDescriptor.MethodType.BIDI_STREAMING }
}

object @{service.name}Client {

  import @{service.name}.Serializers._

  def apply(settings: GrpcClientSettings)(implicit mat: Materializer, ex: ExecutionContext) =
    new @{service.name}Client(settings)

  @for(method <- service.methods) {
    private val @{method.name}Descriptor: MethodDescriptor[@method.inputTypeUnboxed, @method.outputTypeUnboxed] =
      MethodDescriptor.newBuilder()
        .setType(@mapMethodType(method.methodType))
        .setFullMethodName(MethodDescriptor.generateFullMethodName("@service.grpcName", "@method.grpcName"))
        .setRequestMarshaller(new Marshaller(@method.deserializer.name))
        .setResponseMarshaller(new Marshaller(@method.serializer.name))
        .build()
  }
}
