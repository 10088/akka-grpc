package com.lightbend.grpc.interop

import scala.concurrent.ExecutionContext
import scala.concurrent.Future
import scala.reflect.ClassTag

import akka.NotUsed
import akka.http.grpc._
import akka.stream.scaladsl.Source

import com.google.protobuf.ByteString
import com.google.protobuf.empty.Empty

// Generated by our plugin
import io.grpc.testing.integration.test.TestServiceService
import io.grpc.testing.integration.messages._

// TODO this descriptor would be generated from the proto file at https://github.com/grpc/grpc-java/blob/master/interop-testing/src/main/proto/io/grpc/testing/integration/test.proto
// and move to the 'server' project
object TestServiceImpl {
  val descriptor = {
    val builder = new ServerInvokerBuilder[TestServiceService]
    Descriptor[TestServiceService]("grpc.testing.TestService", Seq(
      CallDescriptor.named("EmptyCall", builder.unaryToUnary(_.emptyCall)),
      CallDescriptor.named("UnaryCall", builder.unaryToUnary(_.unaryCall))))
  }
}

// TODO this implementation should eventually be independent of the GoogleTestServiceImpl
// and move to the 'server' project
class TestServiceImpl(implicit ec: ExecutionContext) extends TestServiceService {
  override def emptyCall(req: Empty) = Future.successful(Empty())
  override def unaryCall(req: SimpleRequest): Future[SimpleResponse] = Future.successful(
    SimpleResponse(
      Some(Payload(req.responseType, ByteString.copyFrom(new Array[Byte](req.responseSize))))
    )
  )
  override def cacheableUnaryCall(in: SimpleRequest): Future[SimpleResponse] = ???
  override def fullDuplexCall(in: Source[StreamingOutputCallRequest, NotUsed]): Source[StreamingOutputCallResponse,Any] = ???
  override def halfDuplexCall(in: Source[StreamingOutputCallRequest, NotUsed]): Source[StreamingOutputCallResponse,Any] = ???
  override def streamingInputCall(in: Source[StreamingInputCallRequest,NotUsed]): Future[StreamingInputCallResponse] = ???
  override def streamingOutputCall(in: StreamingOutputCallRequest): Source[StreamingOutputCallResponse, Any] = ???
  override def unimplementedCall(in: Empty): Future[Empty] = ???
}